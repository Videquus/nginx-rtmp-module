worker_processes 1;
error_log /var/log/nginx/error.log debug;
pid /var/log/nginx/nginx.pid;
rtmp {
    server {
        access_log /var/log/nginx/access.log;
        listen 1935;
        chunk_size 4000;
        # application origin {
        #     live on;
        # }
        application hls {
            live on;
            on_publish http://localhost:8181/auth;
            hls on;
            hls_nested off; # In this mode, a subdirectory of hls_path is created for each stream
            hls_fragment 2;
            hls_playlist_length 10m;
            hls_cleanup on;
            hls_path /tmp/hls;      
            hls_continuous on;
            hls_fragment_naming sequential;
            #on_publish http://localhost:8181/auth; 
            hide_stream_key on;
            record all;
            record_path /tmp;     
        } 
        # MPEG-DASH is similar to HLS
        application dash {
            live on;
            dash on;
            dash_path /tmp/dash;
            #dash_nested on;
        }
    }
}
events{
        worker_connections  1024;
}
http {
    access_log /var/log/nginx/access-worker.log;
    server {
        listen      8181;
 
        location /stat {
            rtmp_stat all;
            rtmp_stat_stylesheet static/stat.xsl;
        }
        location /static {
            alias /www/static;
        }
        location /fmp4 {
            # Serve DASH fragments
            root /tmp;
            add_header Cache-Control no-cache;
            add_header Cache-Control no-cache;
            add_header Access-Control-Allow-Origin *;
        }
        location /hls {
            # Serve DASH fragments
            root /tmp;
            add_header Cache-Control no-cache;
        }
        location dash {
           root /tmp;
           add_header Cache-Control no-cache;
        }
        location /mp4 {
                proxy_pass http://127.0.0.1:8181/hls;
        }
        location /auth {
                access_by_lua_block{
                        ngx.status = ngx.HTTP_OK;
                        ngx.say("123")
                        ngx.exit(ngx.HTTP_OK)
                }
        }
    }
}